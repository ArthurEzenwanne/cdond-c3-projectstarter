version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:  
      workflow_id: 
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            pwd
            dir
            # Your code here
            echo "Destroying environment: << parameters.workflow_id >> "
            aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:  
      workflow_id: 
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}    
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=$(curl --insecure  "https://kvdb.io/KiP8dNxt1g1ZAyrgEnwPWk/migration_<< parameters.workflow_id >>")
            echo ${SUCCESS}
            if [ ${SUCCESS} = 1 ]
            then
                pwd
                dir
                cd ..
                pwd
                dir
                cd ..
                pwd
                dir
                cd backend 
                npm install
                #  Add revert code here.
                npm run migrations:revert
                echo ${SUCCESS}
            fi
            
jobs:
  build-frontend:
    docker:
      # - image: cimg/node:19.3.0
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            pwd
            dir
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            pwd
            dir
            # Your code here
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run Frontend unit tests
          command: |
            pwd
            dir
            # Your code here
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Backend unit tests
          command: |
            pwd
            dir
            # Your code here
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run Frontend audit tests
          command: |
            pwd
            dir
            # Your code here
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Backend audit tests
          command: |
            pwd
            dir
            # Your code here
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/aws:2022.11
    steps:
      # Checkout code from git
      - checkout
      - run: 
          name: Install dependencies
          command: |
            pwd
            dir 
            npm install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            pwd
            dir
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              # exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            pwd
            dir
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              # exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            pwd
            dir
            # Your code here
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> ~/project/.circleci/ansible/inventory.txt
            # exit 1
            pwd
            dir
      - persist_to_workspace:
          root: ~/
          # root: .circleci/ansible
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure  
      - destroy-environment  

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      # - image: python:3.7-alpine3.16
      - image: cimg/aws:2022.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["9b:34:78:6f:cb:95:cc:75:61:af:3a:3e:3a:bb:72:d3"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            pwd
            dir
            # Your code here
            # apk add --update --no-cache tar gzip ansible aws-cli
            npm update
            npm install -y tar gzip nodejs npm ansible aws-cli
      - run:
          name: Configure server
          command: |
            pwd
            dir
            # Your code here
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
            pwd
            dir
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      # Here's where you will add some code to rollback on failure   
      - destroy-environment   

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            pwd
            dir
            # Your code here 
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
            # exit 1
      - run:
          name: Send migration results to kvdb.io 
          command: |
            pwd
            dir
            if grep -q "has been executed successfully" ~/project/backend/migrations_dump.txt ; then
                echo HelloMan
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl --insecure "https://kvdb.io/KiP8dNxt1g1ZAyrgEnwPWk/migration_${CIRCLE_WORKFLOW_ID:0:7}" -d '1'
                cat ~/project/backend/migrations_dump.txt
                pwd
                dir
                # return 0
            elif grep -q "migrations are pending" ~/project/backend/migrations_dump.txt ; then
                echo HelloWoman
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl --insecure "https://kvdb.io/KiP8dNxt1g1ZAyrgEnwPWk/migration_${CIRCLE_WORKFLOW_ID:0:7}" -d '1'
                cat ~/project/backend/migrations_dump.txt
                pwd
                dir
                # return 0
            # else 
            #     return 1
            fi
            # exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
            - home/circleci/project/backend
      # Here's where you will add some code to rollback on failure      
      - destroy-environment   
      - revert-migrations    

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/aws:2022.11
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            pwd
            dir
            # your code here
            # apk add --update --no-cache tar gzip nodejs npm aws-cli curl
            npm update
            npm install -y tar gzip nodejs npm curl
      - run:
          name: Get backend url
          command: |
            pwd
            dir
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects 
          command: |
            pwd
            dir
            # your code here
            cd frontend
            # what does this NODE_OPTIONS do (seems it helps for backwards compatibility)
            export NODE_OPTIONS=--openssl-legacy-provider
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            echo "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
            # aws s3 cp dist s3://udapeople-buc-ogidi-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            # echo "s3://udapeople-buc-ogidi-${CIRCLE_WORKFLOW_ID:0:7}"            
            pwd
            dir
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations    
                 
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      # - image: python:3.7-alpine3.16
      - image: cimg/aws:2022.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["9b:34:78:6f:cb:95:cc:75:61:af:3a:3e:3a:bb:72:d3"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            pwd
            dir
            # your code here
            # apk add --update --no-cache tar gzip nodejs npm aws-cli ansible
            npm update
            npm install -y tar gzip nodejs npm ansible
      - run:
          name: Deploy backend
          command: |
            pwd
            dir
            # your code here
            cd backend
            npm install
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            pwd
            dir
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is ------- $(cat inventory.txt)"
            ansible-playbook -i inventory.txt deploy-backend.yml
            pwd
            dir
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations    

  smoke-test:
    docker:
      # Lightweight Docker image       
      # - image: python:3.7-alpine3.16
      - image: cimg/aws:2022.11
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            pwd
            dir
            # apk add --update --no-cache tar gzip nodejs npm aws-cli ansible curl
            npm update
            npm install -y tar gzip nodejs npm ansible curl
      - run:
          name: Get backend url
          command: |
            pwd
            dir
            # your code here
            # Fetch and prepare the BACKEND_IP env var
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Backend smoke test
          command: |
            pwd
            dir
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"

            if curl "${API_URL}/api/status" | grep "ok"
            then
                echo "Backend Smoke Test Success"
                # return 0
            else
                echo "Backend Smoke Test Failed"
                # return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            pwd
            dir
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
                echo "Frontend Smoke Test Success"
                return 1
            else
                echo "Frontend Smoke Test Failed"
                return 1
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations  

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      -  image: cimg/aws:2022.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            npm update
            npm install -y tar gzip nodejs npm 
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt

            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      # Here's where you will add some code to rollback on failure  
      - revert-migrations  
      - destroy-environment

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]

# VS Code Extension Version: 1.5.1